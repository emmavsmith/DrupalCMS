<?php 


/**
 * Implement hook_menu
 */
function content_packager_menu () {

	$items['content'] = array(
		'title' => 'Update Content',
		'page callback' => 'list_nodequeues',
		//permissions required to view page
    'access arguments' => array('content packager'),
    'type' => MENU_NORMAL_ITEM,
    );
	$items['content/packager'] = array(
		'page callback' => 'update_nodequeue_content',
		//permissions required to view page
    'access arguments' => array('content packager'),
    'type' => MENU_CALLBACK,
    );
    //cannot be content/packager/json as it navigates to the method above using 'json' as the argument
   $items['contentpackagerjson'] = array(
   	'access callback' => true,
   	'page callback' => 'get_version_path',
   	'delivery callback' => 'drupal_json_output',
   );
    return $items;
}


/*
 * Implements hook_permission
 */
function content_packager_permission() {
	
	//return an array of permissions
	return array(
		'content packager' => array(
			'title' => t('Content Packager'),
			'description' => t('Packages content to zip'),
		),
	);
}


/**
 * Display a list of queues with an update link for each nodequeue
 */
function list_nodequeues() {

	$output = '';
	
	// Fetch all of the queues.
	$queues = nodequeue_load_queues(nodequeue_get_all_qids(25));
	
	foreach ($queues as $queue) {
		if (!nodequeue_queue_access($queue)) {
		  unset($queues[$queue->qid]);
		}
	}
	
	if (empty($queues)) {
		return $output . t('No nodequeues exist.');
	}
	
	$header = array(
		array('data' => t('Title'), 'field' => 'title', 'sort' => 'asc'),
		array('data' => t('Max nodes'), 'field' => 'size'),
		array('data' => t('Subqueues'), 'field' => 'subqueues'),
		array('data' => t('Update content')), //no sort
	);
	$table_sort = tablesort_init($header);
	
	$qids = array();
	$sort_primary = array();
	$sort_secondary = array();
	$sort_direction_regular = array('asc' => SORT_ASC, 'desc' => SORT_DESC);
	$sort_direction_reverse = array('asc' => SORT_DESC, 'desc' => SORT_ASC);
	foreach ($queues as $queue) {
		// If a queue has only one subqueue, store the qid so we can display
		// the number of nodes in the subqueue.
		if ($queue->subqueues == 1) {
		  $qids[] = $queue->qid;
		}
		$sort_secondary[] = drupal_strtolower($queue->title);
		switch ($table_sort['sql']) {
		  case 'title':
		  default:
		    $sort_primary[] = drupal_strtolower($queue->title);
		    $sort_direction = $sort_direction_regular;
		    break;
		  case 'size':
		    $sort_primary[] = $queue->size;
		    $sort_direction = $sort_direction_reverse;
		    break;
		  case 'subqueues':
		    $sort_primary[] = $queue->subqueues;
		    $sort_direction = $sort_direction_regular;
		    break;
		}
	}
	
	$subqueues = nodequeue_load_subqueues_by_queue($qids);
	// Relate all the subqueues we loaded back to our queues.
	foreach ($subqueues as $subqueue) {
		if (nodequeue_api_subqueue_access($subqueue, NULL, $queues[$subqueue->qid])) {
		  $queues[$subqueue->qid]->subqueue = $subqueue;
		}
	}
	
	if (!empty($table_sort)) {
		if (strtolower($table_sort['sort']) == 'desc') {
		  array_multisort($sort_primary, $sort_direction['desc'], $sort_secondary, $queues); // Re-indexes array keys; key no longer equals qid.
		}
		else {
		  array_multisort($sort_primary, $sort_direction['asc'], $sort_secondary, $queues); // Re-indexes array keys; key no longer equals qid.
		}
	}
	
	$rows = array();
	foreach ($queues as $queue) {
		$sub_text = $queue->subqueues;
		
		// If this queue has only one subqueue.
		if ($sub_text == 1) {
		  $sub_text .= " (" . nodequeue_subqueue_size_text($queue->size, $queue->subqueue->count) . ")";
		}
		
		$rows[] = array(
		  array('class' => array('nodequeue-title'), 'data' => check_plain($queue->title)),
		  array('class' => array('nodequeue-max-nodes'), 'data' => $queue->size == 0 ? t('Infinite') : $queue->size),
		  array('class' => array('nodequeue-subqueues'), 'data' => $sub_text),
		  array('class' => array('nodequeue-update'), 'data' => l('Update', 'content/packager/'.$queue->qid)),
		);
	}
	
	$output .= theme('table', array('header' => $header, 'rows' => $rows));
	$output .= theme('pager', array('tags' => NULL));
	
	return $output;
}


/*
 * Update the specified nodequeue's content by exporting it to a zip file containing a JSON file and images
 */
function update_nodequeue_content($queue_id = 0) {
		
	//get the specified node queue as an array containing its nodes
	$nodes = nodequeue_load_nodes($queue_id, FALSE, NULL, NULL); 
	
	//DEBUG
	//dsm($nodes);
	//print "<pre>";
	//print_r($nodes);
	//print "</pre>";
	
	//convert the node queue array to JSON
	$json = drupal_json_encode($nodes);
	
	//create an archive filename (other options temporary:// & private://)
	$archive_uri = 'public://download_' . REQUEST_TIME . '.zip';
	//create a Zip Archive 
	$zip = new ZipArchive;
	
	//if we successfully create the archive start populating it
	if ($zip->open(drupal_realpath($archive_uri), ZipArchive::CREATE) === TRUE) {
	
		//write the manifest directly from the $JSON string
		$zip->addFromString('manifest.json', $json);	
	
		//check for images in each node within the nodequeue
		foreach ($nodes as $node) {
		
			//get the nodes keys to check if they are images
			foreach ($node as $key => $value) {
				
				//check if there is a key that begins with field_image and it is not empty
				//checks the string for the reg expression but checks that the array is not null
				if(preg_match('/^field_image/', $key) && $node->$key != NULL) {
				
					//save the array ready to access its elements
					$image = $node->$key;
				
					//get the image's uri
					$image_uri = $image['und']['0']['uri'];
					//echo '</br> node is: ' . $node->vid;	//DEBUG
					//echo '</br> image uri is: ' . $image_uri;	//DEBUG
					
					//add the image to the zip file and name it its existing filename
					$zip->addFile(drupal_realpath($image_uri), $image['und']['0']['filename']);
				}	
			}
		}   		
		$zip->close();
		
		drupal_set_message(t('Zip archive successfully created. !link', array('!link' => l(file_create_url($archive_uri), file_create_url($archive_uri)))));
		
		enter_db_details($queue_id, $archive_uri);

	} else {
		drupal_set_message(t('Error creating Zip archive.'), 'error');
	}
	
	//redirect back to the content page, which lists all the nodequeues, and message will be displayed to user
	drupal_goto('content');
}


/*
 *	Either inserts or updates a row in the database for a particular nodequeue id
 */
function enter_db_details($nodequeue_id, $archive_uri){

	if (nodequeue_exists_in_database($nodequeue_id)) {
		
		$version = get_version($nodequeue_id);
		$version += 1;
		update_database_row($nodequeue_id, $version, file_create_url($archive_uri));
		
	} else {
	
		insert_database_row($nodequeue_id, 1, file_create_url($archive_uri));
	}
}


/*
 *	Inserts a new row into the content packager database table
 */
function insert_database_row($nodequeue_id, $version, $file_path){
	
	$query = db_insert('content_packager')
	  ->fields(array(
	    'nodequeue_id' => $nodequeue_id,
	    'version' => $version,
	    'file_path' => $file_path,
	  ))
	  ->execute();
}


/*
 *	Updates a database row for a particular nodequeue id
 */
function update_database_row($nodequeue_id, $version, $file_path){
	 
 $query = db_update('content_packager')
	->fields(array(
    'version' => $version,
    'file_path' => $file_path,
  ))
  ->condition('nodequeue_id', $nodequeue_id, '=')
  ->execute();
}


/*
 *	Checks if there is already a database entry for a particular nodequeue id
 */
function nodequeue_exists_in_database($nodequeue_id) {

	$result = select_db_row($nodequeue_id);
	
	if (($result->rowCount()) > 0) {
		return true;
	}
	return false;
}


/*
 *	Gets the version number of a particular nodequeue id
 */
function get_version($nodequeue_id){
	
	$result = select_db_row($nodequeue_id);

	foreach($result as $record){
		$version = $record->version; 
	}
	return $version;
}


/*
 * Gets the version number and file path for a particular nodequeue id
 */
function get_version_path($nodequeue_id){
	
	$result = select_db_row($nodequeue_id);

	foreach($result as $record){
		$db_row = array(
			'version' => $record->version,
			'file_path' => $record->file_path
		);
	}
	return $db_row;
}


/*
 * Select a row fromm the db using the nodequeue id
 */
function select_db_row($nodequeue_id){
	
	$result = db_query('SELECT * FROM {content_packager} WHERE nodequeue_id = :nodequeue_id', array(
		':nodequeue_id' => $nodequeue_id,
	));
	return $result;
}


?>








